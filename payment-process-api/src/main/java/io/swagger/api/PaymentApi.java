/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.api.response.Response;
import io.swagger.model.Payment;
import io.swagger.model.PaymentHistory;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-25T23:08:44.329Z")

@Api(value = "payment", description = "the payment API")
@CrossOrigin(origins = "*")
public interface PaymentApi {

    @ApiOperation(value = "Create Payment", nickname = "create", notes = "Create a new payment", response = Payment.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Registration successfully Complete", response = Payment.class),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/payment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Response<Payment>> create(@ApiParam(value = ""  )  @Valid @RequestBody Payment payment_);


    @ApiOperation(value = "Find Payment by ID", nickname = "find", notes = "Find Payment by ID", response = Payment.class, tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search was successful!", response = Payment.class),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/payment/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Response<Payment>> find(@ApiParam(value = "",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Find All Payments", nickname = "findAll", notes = "Find All Payments", response = Payment.class, responseContainer = "List", tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search was successful!", response = Payment.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/payment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Response<List<Payment>>> findAll();
    
    @ApiOperation(value = "Find Payment History by Id Payment", nickname = "findPaymentHistory", notes = "Find Payment History by Id Payment", response = Payment.class, responseContainer = "List", tags={ "Payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search was successful!", response = Payment.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 401, message = "Unauthorized request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/payment/history/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Response<List<PaymentHistory>>> findPaymentHistory(@ApiParam(value = "",required=true) @PathVariable("id") Long id);

}
